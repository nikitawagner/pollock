generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model poll_options {
  id         Int    @id @default(autoincrement())
  text       String @db.VarChar(255)
  poll_id_fk Int
  given_id   Int?
  polls      polls  @relation(fields: [poll_id_fk], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "poll_id_fk")

  @@index([poll_id_fk], map: "poll_id_fk_idx")
}

model poll_settings {
  id       Int       @id @default(autoincrement())
  voices   Int?      @default(1)
  worst    Int       @default(0) @db.TinyInt
  polls_fk Int
  deadline DateTime? @db.DateTime(0)
  polls    polls     @relation(fields: [polls_fk], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "polls_fk")

  @@index([polls_fk], map: "polls_id_fk_idx")
}

model polls {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar(255)
  description   String?         @default("no description") @db.VarChar(255)
  fixed         String          @default("[0]") @db.VarChar(255)
  poll_options  poll_options[]
  poll_settings poll_settings[]
  tokens        tokens[]
  user_poll     user_poll[]
}

model tokens {
  id      Int         @id @default(autoincrement())
  value   String?     @unique(map: "value_UNIQUE") @db.VarChar(45)
  link    String?     @default("string") @db.VarChar(45)
  type    tokens_type
  poll_fk Int?
  polls   polls?      @relation(fields: [poll_fk], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "poll_fk")
  votes   votes[]

  @@index([poll_fk], map: "poll_fk_idx")
}

model user_poll {
  users_id_fk Int
  polls_id_fk Int
  polls       polls @relation(fields: [polls_id_fk], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "polls_id_fk")
  users       users @relation(fields: [users_id_fk], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_id_fk")

  @@id([users_id_fk, polls_id_fk])
  @@index([polls_id_fk], map: "poll_id_fk_idx")
}

model users {
  id        Int         @id @default(autoincrement())
  name      String?     @db.VarChar(45)
  user_poll user_poll[]
  votes     votes[]
}

model vote_choice {
  vote_id_fk        Int
  poll_option_id_fk Int
  worst             Int? @default(0) @db.TinyInt

  @@id([vote_id_fk, poll_option_id_fk])
}

model votes {
  id               Int     @id @default(autoincrement())
  time             String? @db.VarChar(45)
  user_id_fk       Int
  edit_token_id_fk Int
  tokens           tokens  @relation(fields: [edit_token_id_fk], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "edit_token_id_fk")
  users            users   @relation(fields: [user_id_fk], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_id_fk")

  @@index([edit_token_id_fk], map: "edit_token_id_fk_idx")
  @@index([user_id_fk], map: "user_id_fk_idx")
}

enum tokens_type {
  admin
  share
  edit
}
